<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莱茵河畔的固执</title>
  
  <subtitle>多特蒙德</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-10-28T12:15:53.408Z</updated>
  <id>/</id>
  
  <author>
    <name>BillReus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>暑假</title>
    <link href="/2019/09/01/%E6%9A%91%E5%81%87%E6%80%BB%E7%BB%93/"/>
    <id>/2019/09/01/暑假总结/</id>
    <published>2019-09-01T14:42:51.000Z</published>
    <updated>2019-10-28T12:15:53.408Z</updated>
    
    <content type="html"><![CDATA[<p>2019暑假</p><a id="more"></a><!-- toc --><h1 id="暑假"><a href="#暑假" class="headerlink" title="暑假"></a>暑假</h1><p>距离上一次写已经有两个半月，期间有太闲有太忙，其实归根结底还是自己太懒外加没什么静下来思考的时间。</p><p>暑假结束又到了自己要面对的时间，又到了要投简历要面试的时候，又到了要复习概念的时候。</p><p>匆匆两月，希望下半年可以找到好的工作，然后实习几个月回去把毕业论文写完，享受那最后的假期。</p><h1 id="厦门"><a href="#厦门" class="headerlink" title="厦门"></a>厦门</h1><p>生活慢慢还是趋于平淡，厦门的实习的时候总体来说还是舒适的，没有那么大强度没有那么大压力，给的实习工资到手可支配的也还行。</p><p>两个月过来自己对于编程的基本的规范，常用的技术也了解很多，也是自己第一次一行行去打代码去完成一个小项目去找问题，当自己真正的去做去解决问题，还是能学习到很多自己平时没注意的。但是自己上手掌握的东西，底层原理也理解的很少，又还无法接触到实际生产上的项目。</p><p>慢节奏导致自己现在有点虚，不知道自己简历上该写些什么。也不知道怎么面对接下来的面试。毕竟自己还得努力去尝试能不能去更高的平台，去更有活力的地方。</p><h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><p>从现在到工作前，自己最近一直在想要做些什么，除了毕业论文除了找工作，大概就是想买个MacBookPro撸代码，想去国外度个假了吧。</p><p>至于编程方面，自己主要想了以下几个方面：</p><ol><li>概念提炼和记忆，基于之前的笔记</li><li>JavaDemo主要写一下概念方面的小demo</li><li>SpringBootStudy主要把每个功能分模块一个个写写</li><li>写一个基于Java的博客顺便布在阿里云上</li><li>把自己暑假做的商城升级功能，提炼笔记</li><li>学习前端和爬虫</li><li>spring和dubbo等源码</li></ol><h1 id="图片来源"><a href="#图片来源" class="headerlink" title="图片来源"></a>图片来源</h1><p>2017年1月20日18点10分，斯里兰卡康堤佛牙寺门前的砖石。</p><p align="right">如果一年都是闲暇的假期</p><br><p align="right"> 那努力也就没有了意义 你说对吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019暑假&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>史诗</title>
    <link href="/2019/06/12/%E5%8F%B2%E8%AF%97/"/>
    <id>/2019/06/12/史诗/</id>
    <published>2019-06-12T13:57:00.000Z</published>
    <updated>2019-10-28T12:15:53.406Z</updated>
    
    <content type="html"><![CDATA[<p>蛋堡说唱歌曲史诗的歌词<br><a id="more"></a><br>考研的时候第一次听到这首歌就被迷住了，里面的每句话都一直鼓励着自己吧，无论在自己身处何时何地，以何种心情去听。</p><h5 id="这首诗-写在十年前的某个凌晨四点"><a href="#这首诗-写在十年前的某个凌晨四点" class="headerlink" title="这首诗 写在十年前的某个凌晨四点"></a>这首诗 写在十年前的某个凌晨四点</h5><h5 id="颜社工作室-你一个人的时间"><a href="#颜社工作室-你一个人的时间" class="headerlink" title="颜社工作室 你一个人的时间"></a>颜社工作室 你一个人的时间</h5><h5 id="安静的黑夜该算今天或明天"><a href="#安静的黑夜该算今天或明天" class="headerlink" title="安静的黑夜该算今天或明天?"></a>安静的黑夜该算今天或明天?</h5><h5 id="卷起一根烟-面对又要逼近的期限"><a href="#卷起一根烟-面对又要逼近的期限" class="headerlink" title="卷起一根烟 面对又要逼近的期限"></a>卷起一根烟 面对又要逼近的期限</h5><h5 id="如果你忘记-我帮你做个提醒"><a href="#如果你忘记-我帮你做个提醒" class="headerlink" title="如果你忘记 我帮你做个提醒"></a>如果你忘记 我帮你做个提醒</h5><h5 id="你这时-正在酝酿一张很屌的专辑"><a href="#你这时-正在酝酿一张很屌的专辑" class="headerlink" title="你这时 正在酝酿一张很屌的专辑"></a>你这时 正在酝酿一张很屌的专辑</h5><h5 id="来自最大管的团体"><a href="#来自最大管的团体" class="headerlink" title="来自最大管的团体"></a>来自最大管的团体</h5><h5 id="需要的只是时间不是指点-批评什么-我才不管你"><a href="#需要的只是时间不是指点-批评什么-我才不管你" class="headerlink" title="需要的只是时间不是指点 批评什么 我才不管你"></a>需要的只是时间不是指点 批评什么 我才不管你</h5><h5 id="疏远了所有人际关系-我没有空"><a href="#疏远了所有人际关系-我没有空" class="headerlink" title="疏远了所有人际关系 我没有空"></a>疏远了所有人际关系 我没有空</h5><h5 id="什么都没了那也没关系-我还有梦"><a href="#什么都没了那也没关系-我还有梦" class="headerlink" title="什么都没了那也没关系 我还有梦"></a>什么都没了那也没关系 我还有梦</h5><h5 id="当初玩饶舌-只想挣脱束缚和期待"><a href="#当初玩饶舌-只想挣脱束缚和期待" class="headerlink" title="当初玩饶舌 只想挣脱束缚和期待"></a>当初玩饶舌 只想挣脱束缚和期待</h5><h5 id="但现在却意外-比过去扛得重"><a href="#但现在却意外-比过去扛得重" class="headerlink" title="但现在却意外 比过去扛得重"></a>但现在却意外 比过去扛得重</h5><h5 id="最后一次点火突然懂了所谓烟到尽头"><a href="#最后一次点火突然懂了所谓烟到尽头" class="headerlink" title="最后一次点火突然懂了所谓烟到尽头"></a>最后一次点火突然懂了所谓烟到尽头</h5><h5 id="当我无技可施忘掉一切放手一搏"><a href="#当我无技可施忘掉一切放手一搏" class="headerlink" title="当我无技可施忘掉一切放手一搏"></a>当我无技可施忘掉一切放手一搏</h5><h5 id="如果这是-我此生写的最后一首饶舌歌"><a href="#如果这是-我此生写的最后一首饶舌歌" class="headerlink" title="如果这是 我此生写的最后一首饶舌歌"></a>如果这是 我此生写的最后一首饶舌歌</h5><h5 id="那我该如何记载呢"><a href="#那我该如何记载呢" class="headerlink" title="那我该如何记载呢?"></a>那我该如何记载呢?</h5><h5 id="于是我找了鼓-找了你会中的sample"><a href="#于是我找了鼓-找了你会中的sample" class="headerlink" title="于是我找了鼓 找了你会中的sample"></a>于是我找了鼓 找了你会中的sample</h5><h5 id="原曲可能是1999年你最爱的一首"><a href="#原曲可能是1999年你最爱的一首" class="headerlink" title="原曲可能是1999年你最爱的一首"></a>原曲可能是1999年你最爱的一首</h5><h5 id="那时你甚至还没饶舌梦"><a href="#那时你甚至还没饶舌梦" class="headerlink" title="那时你甚至还没饶舌梦"></a>那时你甚至还没饶舌梦</h5><h5 id="过两年你才开始写歌-写到现在是个饶舌歌手"><a href="#过两年你才开始写歌-写到现在是个饶舌歌手" class="headerlink" title="过两年你才开始写歌 写到现在是个饶舌歌手"></a>过两年你才开始写歌 写到现在是个饶舌歌手</h5><h5 id="能帮你把这首歌-做成你最爱的样子"><a href="#能帮你把这首歌-做成你最爱的样子" class="headerlink" title="能帮你把这首歌 做成你最爱的样子"></a>能帮你把这首歌 做成你最爱的样子</h5><h5 id="你最爱的beatz-and-flow"><a href="#你最爱的beatz-and-flow" class="headerlink" title="你最爱的beatz and flow"></a>你最爱的beatz and flow</h5><h5 id="或许十年后还是这样子"><a href="#或许十年后还是这样子" class="headerlink" title="或许十年后还是这样子"></a>或许十年后还是这样子</h5><h5 id="听到hip-hop会想跟着点头"><a href="#听到hip-hop会想跟着点头" class="headerlink" title="听到hip hop会想跟着点头"></a>听到hip hop会想跟着点头</h5><h5 id="希望你听到现在-头早就跟着点"><a href="#希望你听到现在-头早就跟着点" class="headerlink" title="希望你听到现在 头早就跟着点"></a>希望你听到现在 头早就跟着点</h5><h5 id="想起二十年前为什么会玩饶舌"><a href="#想起二十年前为什么会玩饶舌" class="headerlink" title="想起二十年前为什么会玩饶舌"></a>想起二十年前为什么会玩饶舌</h5><h5 id="为什么逃家-又为什么重考呢"><a href="#为什么逃家-又为什么重考呢" class="headerlink" title="为什么逃家 又为什么重考呢"></a>为什么逃家 又为什么重考呢</h5><h5 id="想起一路走到这里-你值得为自己骄傲"><a href="#想起一路走到这里-你值得为自己骄傲" class="headerlink" title="想起一路走到这里 你值得为自己骄傲"></a>想起一路走到这里 你值得为自己骄傲</h5><h5 id="但未来的路怎么走-我不免感到焦躁"><a href="#但未来的路怎么走-我不免感到焦躁" class="headerlink" title="但未来的路怎么走 我不免感到焦躁"></a>但未来的路怎么走 我不免感到焦躁</h5><h5 id="总是缅怀过去-你很少想以后"><a href="#总是缅怀过去-你很少想以后" class="headerlink" title="总是缅怀过去 你很少想以后"></a>总是缅怀过去 你很少想以后</h5><h5 id="用饶舌写备忘录我必须自己做"><a href="#用饶舌写备忘录我必须自己做" class="headerlink" title="用饶舌写备忘录我必须自己做"></a>用饶舌写备忘录我必须自己做</h5><h5 id="让以后世界发现以前台湾也有这种音乐"><a href="#让以后世界发现以前台湾也有这种音乐" class="headerlink" title="让以后世界发现以前台湾也有这种音乐"></a>让以后世界发现以前台湾也有这种音乐</h5><h5 id="我可以-you-gotta-believe-me"><a href="#我可以-you-gotta-believe-me" class="headerlink" title="我可以 you gotta believe me"></a>我可以 you gotta believe me</h5><h5 id="你应该38了-如果我能改变得了什么-你应该算是发了"><a href="#你应该38了-如果我能改变得了什么-你应该算是发了" class="headerlink" title="你应该38了 如果我能改变得了什么 你应该算是发了"></a>你应该38了 如果我能改变得了什么 你应该算是发了</h5><h5 id="你是否还在吃药-是否回到中间值或疯癫到让人耻笑"><a href="#你是否还在吃药-是否回到中间值或疯癫到让人耻笑" class="headerlink" title="你是否还在吃药? 是否回到中间值或疯癫到让人耻笑"></a>你是否还在吃药? 是否回到中间值或疯癫到让人耻笑</h5><h5 id="那你爸妈呢-是否签了离婚同意书"><a href="#那你爸妈呢-是否签了离婚同意书" class="headerlink" title="那你爸妈呢? 是否签了离婚同意书?"></a>那你爸妈呢? 是否签了离婚同意书?</h5><h5 id="你是否有把他们跟他们的故事都记住"><a href="#你是否有把他们跟他们的故事都记住" class="headerlink" title="你是否有把他们跟他们的故事都记住?"></a>你是否有把他们跟他们的故事都记住?</h5><h5 id="希望能让他们不再因为没钱不快乐"><a href="#希望能让他们不再因为没钱不快乐" class="headerlink" title="希望能让他们不再因为没钱不快乐"></a>希望能让他们不再因为没钱不快乐</h5><h5 id="是我这时的愿望-希望你早做到了"><a href="#是我这时的愿望-希望你早做到了" class="headerlink" title="是我这时的愿望 希望你早做到了"></a>是我这时的愿望 希望你早做到了</h5><h5 id="还有以前那些玩音乐的朋友"><a href="#还有以前那些玩音乐的朋友" class="headerlink" title="还有以前那些玩音乐的朋友"></a>还有以前那些玩音乐的朋友</h5><h5 id="不管在做什么应该各有各的成就"><a href="#不管在做什么应该各有各的成就" class="headerlink" title="不管在做什么应该各有各的成就"></a>不管在做什么应该各有各的成就</h5><h5 id="如果还有连络-请帮我问候他们"><a href="#如果还有连络-请帮我问候他们" class="headerlink" title="如果还有连络 请帮我问候他们"></a>如果还有连络 请帮我问候他们</h5><h5 id="你在我这样的岁数是跟他们一起混"><a href="#你在我这样的岁数是跟他们一起混" class="headerlink" title="你在我这样的岁数是跟他们一起混"></a>你在我这样的岁数是跟他们一起混</h5><h5 id="对了-我很抱歉我们把你身体弄坏"><a href="#对了-我很抱歉我们把你身体弄坏" class="headerlink" title="对了 我很抱歉我们把你身体弄坏"></a>对了 我很抱歉我们把你身体弄坏</h5><h5 id="我会开始养生-希望你还能做爱"><a href="#我会开始养生-希望你还能做爱" class="headerlink" title="我会开始养生 希望你还能做爱"></a>我会开始养生 希望你还能做爱</h5><h5 id="我正要往你那出发-我会努力到达"><a href="#我正要往你那出发-我会努力到达" class="headerlink" title="我正要往你那出发 我会努力到达"></a>我正要往你那出发 我会努力到达</h5><h5 id="把杜振熙交给你-我希望你也鼓励到他"><a href="#把杜振熙交给你-我希望你也鼓励到他" class="headerlink" title="把杜振熙交给你 我希望你也鼓励到他"></a>把杜振熙交给你 我希望你也鼓励到他</h5><h5 id="如果想起什么写些什么还我"><a href="#如果想起什么写些什么还我" class="headerlink" title="如果想起什么写些什么还我"></a>如果想起什么写些什么还我</h5><h5 id="给你孩子听-跟他说你是我"><a href="#给你孩子听-跟他说你是我" class="headerlink" title="给你孩子听 跟他说你是我"></a>给你孩子听 跟他说你是我</h5><h5 id="如果他喜欢-摸摸他的头说-你识货"><a href="#如果他喜欢-摸摸他的头说-你识货" class="headerlink" title="如果他喜欢 摸摸他的头说 你识货!"></a>如果他喜欢 摸摸他的头说 你识货!</h5><h5 id="教他听hip-hop-就像你试过"><a href="#教他听hip-hop-就像你试过" class="headerlink" title="教他听hip hop 就像你试过"></a>教他听hip hop 就像你试过</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;蛋堡说唱歌曲史诗的歌词&lt;br&gt;
    
    </summary>
    
      <category term="音乐" scheme="/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="蛋堡" scheme="/tags/%E8%9B%8B%E5%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="/2019/05/25/%E6%8E%92%E5%BA%8F/"/>
    <id>/2019/05/25/排序/</id>
    <published>2019-05-25T07:59:00.000Z</published>
    <updated>2019-10-28T12:15:53.408Z</updated>
    
    <content type="html"><![CDATA[<p>常见的七种排序算法<br><a id="more"></a><br><!-- toc --></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>属于交换排序，两两比较交换，遍历一遍即确定最大数</p><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arrays.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arrays.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[j] &gt; arrays[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arrays[j];</span><br><span class="line">                arrays[j] = arrays[j+<span class="number">1</span>];</span><br><span class="line">                arrays[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>思路：如果一趟排序没有位置交换，即数组已经有序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arrays.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> isChange = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arrays.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[j] &gt; arrays[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arrays[j];</span><br><span class="line">                arrays[j] = arrays[j+<span class="number">1</span>];</span><br><span class="line">                arrays[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                isChange = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isChange == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间：O(N^2)</p><p>是否稳定：稳定</p><p>空间：O(1)</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>每次遍历从数组中找出最小值放到最左边</p><h2 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arrays.length;</span><br><span class="line">    <span class="keyword">int</span> minIndex;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[j] &lt; arrays[minIndex])</span><br><span class="line">                minIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minIndex != i)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = arrays[i];</span><br><span class="line">            arrays[i] = arrays[minIndex];</span><br><span class="line">            arrays[minIndex] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间：O(N^2)</p><p>是否稳定：不稳定（相同的数有可能前者会与后面更小的数交换了位置）</p><p>空间：O(1)</p><h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>把数组分成有序和无序，每次从无序中取出一个放入有序队列</p><h2 id="程序-2"><a href="#程序-2" class="headerlink" title="程序"></a>程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arrays.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&gt;<span class="number">0</span>&amp;&amp;(arrays[j]&lt;arrays[j-<span class="number">1</span>]); j--)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = arrays[j];</span><br><span class="line">            arrays[j] = arrays[j-<span class="number">1</span>];</span><br><span class="line">            arrays[j-<span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间：O(N^2)</p><p>是否稳定：稳定</p><p>空间：O(1)</p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><p>对间隔h的数进行排序，不断减小h，最后h=1即数组有序。</p><h2 id="程序-3"><a href="#程序-3" class="headerlink" title="程序"></a>程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arrays.length;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h&lt;n/<span class="number">3</span>)&#123;</span><br><span class="line">        h=<span class="number">3</span>*h+<span class="number">1</span>; <span class="comment">//1,4,13,40...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&gt;<span class="number">0</span>&amp;&amp;(arrays[j]&lt;arrays[j-<span class="number">1</span>]); j--)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = arrays[j];</span><br><span class="line">            arrays[j] = arrays[j-<span class="number">1</span>];</span><br><span class="line">            arrays[j-<span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        h = h/<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间：O(N^(3/2))</p><p>是否稳定：不稳定</p><p>空间：O(1)</p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h2><p>交换排序基于递归，从数组左边选择一个数作为基准值，比基准值小的放前面，比基准值大的放后面。</p><h2 id="程序-4"><a href="#程序-4" class="headerlink" title="程序"></a>程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right = arrays.length-<span class="number">1</span>;</span><br><span class="line">    qiuckSort(arrays, left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qiuckSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = l;<span class="comment">//基准值</span></span><br><span class="line">    <span class="keyword">int</span> start = l+<span class="number">1</span>, end = r;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">        <span class="keyword">while</span>(a[end]&gt;=a[mid] &amp;&amp; start&lt;end)</span><br><span class="line">            end--;</span><br><span class="line">        <span class="keyword">while</span>(a[start]&lt;=a[mid] &amp;&amp; start&lt;end)</span><br><span class="line">            start++;</span><br><span class="line">        <span class="keyword">if</span>(start&lt;end)</span><br><span class="line">            swap(a[start], a[end]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[l], a[start]);</span><br><span class="line">    quickSort(a, l, end-<span class="number">1</span>);</span><br><span class="line">    quickSort(a, end+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><p>三向切分，把数组切分成小于、等于、大于。对于有大量重复元素的数组可以更高效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right = arrays.length-<span class="number">1</span>;</span><br><span class="line">    qiuckSort(arrays, left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qiuckSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = l;<span class="comment">//每次使用的比较值</span></span><br><span class="line">    <span class="keyword">int</span> start = l+<span class="number">1</span>, end = r;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;=end)&#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = a[start] - a[mid];</span><br><span class="line">        <span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)&#123;<span class="comment">//右边比比较值小</span></span><br><span class="line">            swap(a[mid++], a[start++]);<span class="comment">//交换位置，比较值位置等于前移一位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)&#123;<span class="comment">//右边比比较值大</span></span><br><span class="line">            swap(a[start], a[end--]);<span class="comment">//把大的放到最后，下次大的放在倒数第二</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(a, l, mid-<span class="number">1</span>);</span><br><span class="line">    quickSort(a, end+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间：O(N^lgN)</p><p>是否稳定：不稳定</p><p>空间：O(NlgN)</p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h2><p>将数组拆分成两部分，分别排序然后归并。自顶向下即将一个大数组分成两个小数组。</p><h2 id="程序-5"><a href="#程序-5" class="headerlink" title="程序"></a>程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSortUpDown</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="keyword">null</span> || start&gt;=end)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (end+start)/<span class="number">2</span>;</span><br><span class="line">    mergeSortUpDown(a, start, mid);</span><br><span class="line">    mergeSortUpDown(a, mid+<span class="number">1</span>, end);</span><br><span class="line">    merge(a, start, mid, end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将两个相邻的有序区间合并成一个</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[end-start+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i = start;</span><br><span class="line">    <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=start; k&lt;=end; k++)&#123;</span><br><span class="line">        tmp[k] = a[k];<span class="comment">// 将数据复制到辅助数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=start; k&lt;=end; k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; mid)&#123;左边没有数存右边</span><br><span class="line">            a[k] = tmp[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j &gt; end)&#123;<span class="comment">//右边没有数，存左边</span></span><br><span class="line">            a[k] = tmp[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp[i] - tmp[j] &lt;= <span class="number">0</span>)&#123;<span class="comment">//合并数组中左边较小，存</span></span><br><span class="line">            a[k] = tmp[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//合并数组右边较小，存</span></span><br><span class="line">            a[k] = tmp[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间：O(NlgN)</p><p>是否稳定：稳定</p><p>空间：O(NlgN)</p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h2><p>用数组模拟二叉树的数据结构存储数据，每次把最大值放在堆顶，然后交换数据把最大值放到末尾，循环既可。</p><p>其中：当数组第0个位置没有元素时，索引为i的数，左孩子是2i，右孩子是2i+1，父节点是i/2</p><h2 id="程序-6"><a href="#程序-6" class="headerlink" title="程序"></a>程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组第 0 个位置不能有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> n = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//构建堆，从倒数第二层开始下沉即可</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=n/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">        sink(a, k, n);</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        swap(a, <span class="number">1</span>, n--);<span class="comment">//最大值放到最后</span></span><br><span class="line">        sink(a, <span class="number">1</span>, n);<span class="comment">//新的下沉    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//k节点下沉到合适位置</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span> * k &lt;= n)&#123;<span class="comment">//非叶子层</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * k;<span class="comment">//左孩子</span></span><br><span class="line">        <span class="keyword">if</span>(j &lt; n &amp;&amp; (a[j] - a[j+<span class="number">1</span>] &lt; <span class="number">0</span>))<span class="comment">//选出两个孩子中大的一个</span></span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span>(a[k] - a[j] &gt; <span class="number">0</span>)<span class="comment">//父与子中大的对比</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        swap(a, k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间：O(NlgN)</p><p>是否稳定：不稳定</p><p>空间：O(1)</p><p>现代操作系统很少使用堆排序，因为它无法利用局部性原理进行缓存，也就是数组元素很少和相邻的元素进行比较和交换。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>算法</th><th>稳定性</th><th>时间复杂度</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td>选择排序</td><td>×</td><td>N2</td><td>1</td><td></td></tr><tr><td>冒泡排序</td><td>√</td><td>N2</td><td>1</td><td></td></tr><tr><td>插入排序</td><td>√</td><td>N ~ N2</td><td>1</td><td>时间复杂度和初始顺序有关</td></tr><tr><td>希尔排序</td><td>×</td><td>N 的若干倍乘于递增序列的长度</td><td>1</td><td>改进版插入排序</td></tr><tr><td>快速排序</td><td>×</td><td>NlogN</td><td>logN</td><td></td></tr><tr><td>三向切分快速排序</td><td>×</td><td>N ~ NlogN</td><td>logN</td><td>适用于有大量重复主键</td></tr><tr><td>归并排序</td><td>√</td><td>NlogN</td><td>N</td><td></td></tr><tr><td>堆排序</td><td>×</td><td>NlogN</td><td>1</td><td>无法利用局部性原理</td></tr></tbody></table><p>快速排序是最快的通用排序算法，它的内循环的指令很少，而且它还能利用缓存，因为它总是顺序地访问数据。它的运行时间近似为 ~cNlogN，这里的 c 比其它线性对数级别的排序算法都要小。</p><p>Java 主要排序方法为 java.util.Arrays.sort()，对于原始数据类型使用三向切分的快速排序，对于引用类型使用归并排序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的七种排序算法&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>广场</title>
    <link href="/2019/05/20/%E5%B9%BF%E5%9C%BA/"/>
    <id>/2019/05/20/广场/</id>
    <published>2019-05-20T12:23:00.000Z</published>
    <updated>2019-10-28T12:15:53.407Z</updated>
    
    <content type="html"><![CDATA[<p>广场旁白<br><a id="more"></a></p><p>每次有些恍惚的时候就会想起李志的歌，也许比较切合此时此刻凌乱的想法吧，上次听广场发现中间有段声音不是很大的独白，很有感触，从网上找了词摘录在此：</p><h5 id="昨夜如梦，像流星划过"><a href="#昨夜如梦，像流星划过" class="headerlink" title="昨夜如梦，像流星划过"></a>昨夜如梦，像流星划过</h5><h5 id="忘了他"><a href="#忘了他" class="headerlink" title="忘了他"></a>忘了他</h5><h5 id="忘了那双手所干过的一切"><a href="#忘了那双手所干过的一切" class="headerlink" title="忘了那双手所干过的一切"></a>忘了那双手所干过的一切</h5><h5 id="我再也不像从前那样玩世不恭"><a href="#我再也不像从前那样玩世不恭" class="headerlink" title="我再也不像从前那样玩世不恭"></a>我再也不像从前那样玩世不恭</h5><h5 id="再也不像从前那样爱你"><a href="#再也不像从前那样爱你" class="headerlink" title="再也不像从前那样爱你"></a>再也不像从前那样爱你</h5><h5 id="突然有一天我醒了"><a href="#突然有一天我醒了" class="headerlink" title="突然有一天我醒了"></a>突然有一天我醒了</h5><h5 id="看着这外面一片白云"><a href="#看着这外面一片白云" class="headerlink" title="看着这外面一片白云"></a>看着这外面一片白云</h5><h5 id="火车低低地飞过"><a href="#火车低低地飞过" class="headerlink" title="火车低低地飞过"></a>火车低低地飞过</h5><h5 id="一片叶子掉下来"><a href="#一片叶子掉下来" class="headerlink" title="一片叶子掉下来"></a>一片叶子掉下来</h5><h5 id="我感觉到一切在生长"><a href="#我感觉到一切在生长" class="headerlink" title="我感觉到一切在生长"></a>我感觉到一切在生长</h5><h5 id="一切又再衰老"><a href="#一切又再衰老" class="headerlink" title="一切又再衰老"></a>一切又再衰老</h5><h5 id="一切就像你，一切就像我"><a href="#一切就像你，一切就像我" class="headerlink" title="一切就像你，一切就像我"></a>一切就像你，一切就像我</h5><h5 id="我再也找不到那些时光"><a href="#我再也找不到那些时光" class="headerlink" title="我再也找不到那些时光"></a>我再也找不到那些时光</h5><h5 id="杀死他"><a href="#杀死他" class="headerlink" title="杀死他"></a>杀死他</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;广场旁白&lt;br&gt;
    
    </summary>
    
      <category term="音乐" scheme="/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="李志" scheme="/tags/%E6%9D%8E%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Redis缓存和消息队列</title>
    <link href="/2019/05/18/Redis%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>/2019/05/18/Redis一致性/</id>
    <published>2019-05-18T03:21:00.000Z</published>
    <updated>2019-10-28T12:15:53.403Z</updated>
    
    <content type="html"><![CDATA[<p>Redis作为缓存和消息队列的问题总结。<br><a id="more"></a></p><!-- toc --><h1 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在高并发情况下，会使用redis作为缓存，而不是直接访问MySQL。一般流程为：</p><ol><li>判断缓存是否有数据，如果有直接调用，结束</li><li>如果无数据，从数据库加载数据，并把数据写入缓存</li></ol><p>不管是先写数据库再删redis缓存，还是先删除缓存再更新数据库都可能出现数据不一致情况。例如：</p><ol><li>如果先写库，在删除缓存前，写库线程宕机了，没有删除缓存。</li><li>如果先删除redis缓存，还没来得及写MySQL，另一个线程就来读取发现缓存为空，又去数据库读取数据写入缓存，此时缓存为脏数据。</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="延时双删"><a href="#延时双删" class="headerlink" title="延时双删"></a>延时双删</h3><p>在写库前后都进行redis.del(key)操作，并且设定合理的超时时间。</p><p>例如：</p><ol><li>先删除缓存</li><li>写数据库</li><li>休眠500ms</li><li>再次删除缓存</li></ol><p>休眠时间根据redis和数据库主从同步的耗时决定，同时给缓存设置过期时间。</p><h3 id="异步更新"><a href="#异步更新" class="headerlink" title="异步更新"></a>异步更新</h3><p>读Redis（热点数据设定淘汰策略）+写MySQL+消息队列更新Redis</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>请求去查询一条压根儿数据库中根本就不存在的数据，也就是缓存和数据库都查询不到这条数据，但是请求每次都会打到数据库上面去。有可能会产生大量的请求到数据库查询。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>缓存空值：把没有的key设置为null丢到缓存中</li><li>BloomFilter：类似于一个hbase set 用来判断某个元素（key）是否存在于某个集合中。</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>大量的请求同时查询一个 key 时，此时这个key正好失效了，就会导致大量的请求都打到数据库上面去。这种现象我们称为缓存击穿。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>上面的现象是多个线程同时去查询数据库的这条数据，那么我们可以在第一个查询数据的请求上使用一个 互斥锁来锁住它。</p><p>其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有缓存了，就直接走缓存。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩的情况是说，当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到DB上面。结果就是DB 称不住，挂掉。</p><h3 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>使用集群缓存，保证缓存服务的高可用</li><li>ehcache本地缓存 + Hystrix限流&amp;降级,避免MySQL被打死</li><li>开启Redis持久化机制，尽快恢复缓存集群</li></ol><h2 id="热点数据集中失效"><a href="#热点数据集中失效" class="headerlink" title="热点数据集中失效"></a>热点数据集中失效</h2><p>我们在设置缓存的时候，一般会给缓存设置一个失效时间，过了这个时间，缓存就失效了。</p><p>redis的热点数据淘汰策略有：</p><ol><li>已设置过期时间的数据中最少使用的数据</li><li>已设置过期时间的数据中要过期的数据</li><li>已设置过期时间的任意淘汰</li><li>数据集中最少使用</li><li>数据集中任意淘汰</li></ol><p>对于一些热点的数据来说，当缓存失效以后会存在大量的请求过来，然后打到数据库去，从而可能导致数据库崩溃的情况。</p><h3 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>设置不同的失效时间，比如在一个基础的时间上加上或者减去一个范围内的随机值。</li><li>结合上面的击穿的情况，在第一个请求去查询数据库的时候对他加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，从而保护数据库。</li></ol><h1 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h1><p>redis作为消息队列并不可靠，尽量不要使用redis作为消息队列。</p><p>存在问题：</p><ol><li>当消费者从消息队列中取出消息准备处理时，该服务器宕机，该消息就会丢失。</li><li>redis本身宕机，消息持久化并不完全可靠。</li></ol><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>对于问题1，RabbitMQ作为消息中间件可以关闭autoAck，此时当消息处理完毕会反馈给中间件一个ACK消息，</p><p>对于问题2，RabbitMQ会对整个队列和消息进行持久化记录，但是不能保证100%写入。</p><h1 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h1><p>为了保证在分布式环境下多进程对于数据的一致性，需要使用分布式锁，目前常见有基于数据库、redis和zookeeper实现的分布式锁。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>锁的实现主要基于SETNX命令，当且仅当key不存在时，将key值设为value，若给定key已存在，SETNX不做任何动作。设置成功会返回1，失败返回0。</p><p>同步锁流程：</p><ol><li>使用<code>SETNX</code>命令获取锁，若返回0（key已存在，锁已存在）则获取失败，反之获取成功</li><li>为了防止获取锁后程序出现异常，导致其他线程/进程调用<code>SETNX</code>命令总是返回0而进入死锁状态，需要为该key设置一个“合理”的过期时间</li><li>释放锁，使用<code>DEL</code>命令将锁数据删除</li></ol><h1 id="图片来源"><a href="#图片来源" class="headerlink" title="图片来源"></a>图片来源</h1><p>2017年1月23日，斯里兰卡Matara，路边休息随手抓拍。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis作为缓存和消息队列的问题总结。&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="/categories/Redis/"/>
    
    
      <category term="Redis" scheme="/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Java8</title>
    <link href="/2019/05/15/Java8/"/>
    <id>/2019/05/15/Java8/</id>
    <published>2019-05-15T06:53:00.000Z</published>
    <updated>2019-10-28T12:15:53.402Z</updated>
    
    <content type="html"><![CDATA[<p>Java8特性<br><a id="more"></a></p><!-- toc --><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式也称为闭包，允许把函数作为一个方法的参数。</p><p>语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">(parameters -&gt; &#123;</span><br><span class="line">statements;</span><br><span class="line">statements1;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>常用于返回参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回5</span></span><br><span class="line">() -&gt; <span class="number">5</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回一个参数的两倍</span></span><br><span class="line">x -&gt; <span class="number">2</span>*x</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回两个参数的差值</span></span><br><span class="line">(x, y) -&gt; x-y</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收一个对象，打印</span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure><p>用于重写方法（匿名类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 java 7 排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava7</span><span class="params">(List&lt;String&gt; names)</span></span>&#123;   </span><br><span class="line">   Collections.sort(names, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 使用 java 8 排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava8</span><span class="params">(List&lt;String&gt; names)</span></span>&#123;</span><br><span class="line">   Collections.sort(names, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于代替匿名类创建线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Runnable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyRunnable instance = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(instance);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java8</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>通常使用lambda表达式创建匿名方法，有时我们只调用一个已存在的方法，可以使用方法引用来简写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(stringsArray,(s1,s2)-&gt;s1.compareToIgnoreCase(s2));</span><br><span class="line">Arrays.sort(stringsArray, String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure><h2 id="图片来源"><a href="#图片来源" class="headerlink" title="图片来源"></a>图片来源</h2><p>17年1月21日9点30分，斯里兰卡皇家植物园，中间黑点是我= =</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java8特性&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="/categories/Java/"/>
    
    
      <category term="Java" scheme="/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="/2019/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>/2019/05/05/设计模式/</id>
    <published>2019-05-05T05:37:00.000Z</published>
    <updated>2019-10-28T12:15:53.408Z</updated>
    
    <content type="html"><![CDATA[<p>总结常用的设计模式：单例，简单工厂，工厂方法，抽象工厂，代理</p><a id="more"></a><!-- toc --><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>确保一个类只有一个实例，并提供该实例的全局访问</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>私有静态变量+私有构造函数+公有静态函数。</p><p>私有构造函数保证了只能通过公有静态函数返回唯一的私有静态变量。</p><h2 id="懒汉模式–线程不安全"><a href="#懒汉模式–线程不安全" class="headerlink" title="懒汉模式–线程不安全"></a>懒汉模式–线程不安全</h2><p>下面实现是最基本的单例模式，通过私有构造方法保证只能由公有静态函数返回唯一的私有静态变量。</p><p>该实现优点是如果没有用到该类就不会实例化singInstance。但是在多线程下是不安全的，如果多个线程同时进入到<code>if(singInstance == null)</code>就会导致多次实例化singInstance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getsingInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><p>针对恶汉模式，牺牲了节约资源的优点，直接通过私有静态函数返回唯一私有静态变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton getsingInstance = <span class="keyword">new</span> Singleton();</span><br></pre></td></tr></table></figure><h2 id="懒汉模式–线程安全"><a href="#懒汉模式–线程安全" class="headerlink" title="懒汉模式–线程安全"></a>懒汉模式–线程安全</h2><p>对公有静态函数加锁的方式来达到线程安全。但是加悲观锁同样由于线程阻塞时间长，性能不高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getsingInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">        singInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h2><p>双重校验锁即：先判断是否已经实例化，如果没有实例化再对实例化语句加锁。之后防止未实例化的多个线程同时加锁，所以在加锁后需要再次校验判断是否实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getsingInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(singInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私有静态变量需要volatile修饰的原因是为了禁止重排序。</p><p><code>singInstance = new Singleton()</code>分为三步：</p><ol><li>为singInstance分配内存空间</li><li>初始化singInstance</li><li>将singInstance指向分配的内存地址</li></ol><p>在单线程下重排序不影响运行，但是多线程下，如果线程1执行了1和3，线程2调用getsingInstance()时会返回singInstance，但是此时对象还没有初始化完成。</p><h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><p>创建对象不暴露内部细节，使用通用接口创建对象。</p><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><p>一个接口提供产品类的公有特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exProduct1</span> <span class="keyword">implements</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exProduct2</span> <span class="keyword">implements</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exProduct3</span> <span class="keyword">implements</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h2><p>简单工厂类，被需要实例化的客户类调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">creatProduct</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> exProduct1();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> exProduct2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> exProduct3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户"><a href="#客户" class="headerlink" title="客户"></a>客户</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clinet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SimpleFactory simpleFactory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line">        Product product = simpleFactory.creatProduct(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h1><p>相对于简单工厂变化在于，实例化操作交给的子类工厂。所以产品没有变化。</p><h2 id="工厂-1"><a href="#工厂-1" class="headerlink" title="工厂"></a>工厂</h2><p>工厂类被细分成工厂类和子类，子类负责生产实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Product product = factoryMethod();</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exProduct1</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> exProduct1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exProduct2</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> exProduct2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exProduct3</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> exProduct3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h1><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>代替原对象去完成一些操作。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"模拟：保存用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"模拟：查询用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 代理对象，需要维护一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao target = <span class="keyword">new</span> UserDao();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理操作： 开启事务..."</span>);</span><br><span class="line">        target.save();   <span class="comment">// 执行目标对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">"代理操作：提交事务..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target.find();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理操作： 开启事务...</span></span><br><span class="line"><span class="comment">//模拟：保存用户！</span></span><br><span class="line"><span class="comment">//代理操作：提交事务...</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserDao proxy = <span class="keyword">new</span> UserDaoProxy();</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"模拟：保存用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"模拟：查询用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态代理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 接收一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回对目标对象(target)代理后的对象(proxy)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),  <span class="comment">// 目标对象使用的类加载器</span></span><br><span class="line">                target.getClass().getInterfaces(),   <span class="comment">// 目标对象实现的所有接口</span></span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;            <span class="comment">// 执行代理对象方法时候触发</span></span><br><span class="line">                <span class="comment">//实现阶段不用关心代理谁</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">                            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 获取当前执行的方法的方法名</span></span><br><span class="line">                        String methodName = method.getName();</span><br><span class="line">                        <span class="comment">// 方法返回值</span></span><br><span class="line">                        Object result = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"find"</span>.equals(methodName)) &#123;</span><br><span class="line">                            <span class="comment">// 直接调用目标对象方法</span></span><br><span class="line">                            result = method.invoke(target, args);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">"开启事务..."</span>);</span><br><span class="line">                            <span class="comment">// 执行目标对象方法</span></span><br><span class="line">                            result = method.invoke(target, args);</span><br><span class="line">                            System.out.println(<span class="string">"提交事务..."</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**目标对象: class DesignModel.Proxy.UserDao</span></span><br><span class="line"><span class="comment">**代理对象：class com.sun.proxy.$Proxy0</span></span><br><span class="line"><span class="comment">**开启事务...</span></span><br><span class="line"><span class="comment">**模拟：保存用户！</span></span><br><span class="line"><span class="comment">**提交事务...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建目标对象</span></span><br><span class="line">        IUserDao target = <span class="keyword">new</span> UserDao();</span><br><span class="line">        System.out.println(<span class="string">"目标对象: "</span> + target.getClass());</span><br><span class="line">        <span class="comment">//代理对象</span></span><br><span class="line">        IUserDao proxy = (IUserDao)<span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class="line">        System.out.println(<span class="string">"代理对象："</span>+proxy.getClass());</span><br><span class="line">        <span class="comment">//执行代理对象的方法</span></span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h1><p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并自动更新状态。</p><h1 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h1><p>把一个类接口转换成另一个用户需要的接口。</p><h1 id="图片来源"><a href="#图片来源" class="headerlink" title="图片来源"></a>图片来源</h1><p>2017年1月18日13点04分，斯里兰卡锡吉里耶狮子岩登顶。前一宿喝多了，导致整个人没什么状态，没能充分享受美景，甚是遗憾。</p><p align="right">此间经年，沧海桑田；此间少年，物是人非。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结常用的设计模式：单例，简单工厂，工厂方法，抽象工厂，代理&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="设计模式" scheme="/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="/2019/05/02/%E5%8D%9A%E5%AE%A2%E7%94%A8%E9%80%94/"/>
    <id>/2019/05/02/博客用途/</id>
    <published>2019-05-02T13:21:51.000Z</published>
    <updated>2019-10-28T12:15:53.405Z</updated>
    
    <content type="html"><![CDATA[<p>博客整体规划，一些思路记录在此。</p><a id="more"></a><!-- toc --><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>经过几天不停的调试皮肤和CDN第一版博客就先这样，以后有时间再折腾。Hexo的搭建过程很顺利，就是在皮肤设置以后的效果细节上不停有问题，再加上该主题中文用的少，教程不足，自己在github的用户手册看着英文，也有很多问题找不到解决办法，最后一点点的测模仿，终于初步的让自己满意。后续有动力闲着没事的话自己maybe会写一个教程吧。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>博客整体内容需要在写的过程中慢慢摸索，虽然应该没什么人看，自己也不想宣传，作为自己一个没事写写玩玩的地方吧。</p><p>目前想好的内容分为：</p><ol><li>日记：记录自己一些想说的东西，或者一些有趣，亦或自己想记录的东西。（PS：好几年断档没记录过什么东西了，偶尔翻看自己以前写的东西还是蛮有趣的）。</li><li>算法：只写一些思考比较多的比较经典的吧，大部分还是github上略微写写就可以了。</li><li>笔记：学习语言和框架部分自己想总结的部分。</li><li>杂录：歌曲文字图片什么的，觉得有意思的。</li></ol><p>目前想到的就是这些吧，后续如果有什么想法再补上。</p><h1 id="风格和未来规划"><a href="#风格和未来规划" class="headerlink" title="风格和未来规划"></a>风格和未来规划</h1><p>目前主页的方形图以自己拍摄的图片，在每篇文章底部介绍一下。内容标题的图片主要是高清的世界各地的图片。</p><p>未来需要扩展的功能：</p><ol><li>评论</li><li>统计</li><li>搜索</li><li>代码块主题</li><li>音乐</li><li>美化</li></ol><h1 id="图片来源"><a href="#图片来源" class="headerlink" title="图片来源"></a>图片来源</h1><p>2017年1月20日18点10分，斯里兰卡康堤佛牙寺门前的砖石。</p><p align="right">如果一年都是闲暇的假期</p><br><p align="right"> 那努力也就没有了意义 你说对吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客整体规划，一些思路记录在此。&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="/2019/04/29/hello-world/"/>
    <id>/2019/04/29/hello-world/</id>
    <published>2019-04-29T14:17:00.000Z</published>
    <updated>2019-10-28T12:15:53.404Z</updated>
    
    <content type="html"><![CDATA[<p>总结搭建过程中遇到的Hexo常用命令<br><a id="more"></a></p><!-- toc --><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><p>hexo s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行项目</span><br></pre></td></tr></table></figure><p>编译项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>推送项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>上传七牛云</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo qiniu s</span><br></pre></td></tr></table></figure><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>新建文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;xxx&quot;</span><br></pre></td></tr></table></figure></p><p>文章内的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">date: 日期</span><br><span class="line">tags:</span><br><span class="line">    - 标签</span><br><span class="line">keywords:</span><br><span class="line">- 关键字</span><br><span class="line">clearReading: true</span><br><span class="line">thumbnailImagePosition: 首页文字图片位置</span><br><span class="line">thumbnailImage: 首页图片</span><br><span class="line">metaAlignment：文章标题位置(center,left,right)</span><br><span class="line">coverImage: 文章内图片</span><br><span class="line">coverCaption: &quot;文章内图片说明&quot;</span><br></pre></td></tr></table></figure></p><p>文章概览和目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure><h2 id="图片来源"><a href="#图片来源" class="headerlink" title="图片来源"></a>图片来源</h2><p>16年12月4日7点40分，天津早晨的大雾，伸手不见五指，去考研自习室路上所拍。</p><p align="right">回忆是风送来的无奈</p><br><p align="right">寂寞时 唯一的告白</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结搭建过程中遇到的Hexo常用命令&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="/tags/Hexo/"/>
    
  </entry>
  
</feed>
